# The user that has delegated rights to run this web server
user http http;

# This hosting plan only has 2 processors at the moment.
worker_processes  2;

# The worker_connections and worker_processes from the main section allows you
# to calculate max clients you can handle: max clients = worker_processes *
# worker_connections In a reverse proxy situation, max clients becomes max
# clients = worker_processes * worker_connections/4 Since a browser opens 2
# connections by default to a server and nginx uses the fds (file descriptors)
# from the same pool to connect to the upstream backend

events {
  worker_connections  2000;
}


http {

    include                 mime.types;
    set_real_ip_from        127.0.0.1;
    proxy_cache_path        /var/cache/nginx levels=1:2 keys_zone=one:8m max_size=3000m inactive=600m;
    proxy_temp_path         /var/tmp;
    default_type            application/octet-stream;
    real_ip_header          X-Forwarded-For;

    client_header_timeout   3m;
    client_body_timeout     3m;
    send_timeout            3m;

    output_buffers          1 32k;
    postpone_output         1460;

    port_in_redirect        off;
    sendfile                on;
    tcp_nopush              on;

    tcp_nodelay             on;
    send_lowat              12000;

    keepalive_timeout       75 20;

    # lingering_time        30;
    # lingering_timeout     10;
    # reset_timedout_connection  on;

    gzip                    on;
    gzip_comp_level         6;
    gzip_vary               on;
    gzip_min_length         1100;
    gzip_proxied            any;
    gzip_types              text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_buffers            4 8k;

    # Same server listed twice because the way Nginx falls back in the event of
    # a backend failure it will give the request another try. Upstream block to
    # define our backend servers for those that didn't get filtered out by
    # Varnish.

    upstream node_js {
      server 127.0.0.1:1337;
      server 127.0.0.1:1337;
    }

    log_format timed    '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" $request_time $upstream_response_time $pipe';


    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';
    #access_log  logs/access.log  main;
    #tcp_nopush     on;



    #-----------------------------------------------------------------
    # Master HTTP Server as gateway for proxying TCP and web socket
    # requests all through port 80 so we have no uglu subdomains.
    #-----------------------------------------------------------------

    server {

        listen       *:81;

        server_name  solobit.net *.solobit.net;

        root         /srv/solobit.net;

        error_log    /var/log/nginx/error.log info;

        access_log   /var/log/nginx/access.log timed;

        # Root document location /
        location / {

          proxy_redirect off;
          proxy_set_header    X-Real-IP         $remote_addr;
          proxy_set_header    X-Forwarded-For   $proxy_add_x_forwarded_for;
          proxy_set_header    X-Forwarded-Proto $scheme;
          proxy_set_header    Host              $http_host;
          proxy_set_header    X-NginX-Proxy     true;
          proxy_set_header    Connection        "";
          proxy_http_version  1.1;
          proxy_cache one;
          proxy_cache_key sfs$request_uri$scheme;
          #proxy_pass http://unix:/run/www-node.sk:/;

          # Pass to the block instead of socket
          # proxy_pass http://node_js;
        }

        # Serve all files that exist using nginx
        #location / {
          #try_files $uri $uri/ @proxy;
        #}

        # Proxy all other requests to Node.js
        # location @proxy {
        #  proxy_pass http://node_js;
        # }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
          root   /srv/www/errors;
        }

    
    }

  server {

        listen 82;
        #listen [::]:80; # use this only if using IPv6
        client_max_body_size    4M;
        server_name  graphite.solobit.net;
        root   /opt/graphite/webapp/graphite
        access_log  /var/log/nginx/stats.access.log;
        error_log  /var/log/nginx/stats.error.log;

       location / {
        }
       location /graphite/ {
                gzip off;
                include uwsgi_params;
                uwsgi_pass      127.0.0.1:3031;
        }
       location /content {
                alias /opt/graphite/webapp/graphite/content;
                gzip off;
                include uwsgi_params;
                uwsgi_pass      127.0.0.1:3031;
        }
       location /metrics {
                alias /opt/graphite/webapp/graphite/metrics;
                gzip off;
                include uwsgi_params;
                uwsgi_pass      127.0.0.1:3031;
        }
       location /dashboard {
                alias /opt/graphite/webapp/graphite/dashboard;
                gzip off;
                include uwsgi_params;
                uwsgi_pass      127.0.0.1:3031;
        }
       location /render {
                alias /opt/graphite/webapp/graphite/render;
                gzip off;
                include uwsgi_params;
                uwsgi_pass      127.0.0.1:3031;
        }
       location /browser {
                alias /opt/graphite/webapp/graphite/browser;
                gzip off;
                include uwsgi_params;
                uwsgi_pass      127.0.0.1:3031;
        }
       location /composer {
                alias /opt/graphite/webapp/graphite/composer;
                gzip off;
                include uwsgi_params;
                uwsgi_pass      127.0.0.1:3031;
        }
  }


#/http
}

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}



